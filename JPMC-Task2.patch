From 286206db6c9201f841fad292a261dc10bcee26a4 Mon Sep 17 00:00:00 2001
From: Yash Sharma <yash13042000@gmail.com>
Date: Mon, 27 Apr 2020 20:23:28 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/server.py  |  2 +-
 src/App.tsx         | 29 +++++++++++++++++++----------
 src/DataStreamer.ts |  2 +-
 src/Graph.tsx       | 17 ++++++++++++-----
 4 files changed, 33 insertions(+), 17 deletions(-)

diff --git a/datafeed/server.py b/datafeed/server.py
index 2ffad43..2450d2e 100644
--- a/datafeed/server.py
+++ b/datafeed/server.py
@@ -201,7 +201,7 @@ def get(req_handler, routes):
                 req_handler.wfile.write(data)
                 return
 
-def run(routes, host = '0.0.0.0', port = 8080):
+def run(routes, host = '0.0.0.0', port = 8085):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..83d7db3 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x=0;
+    const interval = setInterval(() => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState({ 
+        data: serverResponds,
+        showGraph: true,
     });
+  });
+  x++;
+  if(x>1000){
+    clearInterval(interval);
+  }
+}, 100);
   }
 
   /**
@@ -53,15 +67,10 @@ class App extends Component<{}, IState> {
           Bank & Merge Co Task 2
         </header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+          <button className="btn btn-primary Stream-button"// when button is click, our react app tries to request// new data from the server.// As part of your task, update the getDataFromServer() function// to keep requesting the data every 100ms until the app is closed// or the server does not return anymore data. 
+          onClick={()=> {this.getDataFromServer()}}>
             Start Streaming Data
-          </button>
+            </button>
           <div className="Graph">
             {this.renderGraph()}
           </div>
@@ -71,4 +80,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/DataStreamer.ts b/src/DataStreamer.ts
index 78583cb..eef3f09 100644
--- a/src/DataStreamer.ts
+++ b/src/DataStreamer.ts
@@ -15,7 +15,7 @@ export interface ServerRespond {
 
 class DataStreamer {
   // The url where datafeed server is listening
-  static API_URL: string = 'http://localhost:8080/query?id=1';
+  static API_URL: string = 'http://localhost:8085/query?id=1';
 
   /**
    * Send request to the datafeed server and executes callback function on success
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..1e65172 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,9 +49,17 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+    elem.setAttribute('view', 'y_line');
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates', `
+    {"stock": "distinct count",
+     "top_ask_price":"avg",
+     "top_bid_price":"avg",
+     "timestamp":"distinct count"}`);
     }
   }
-
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
@@ -69,5 +77,4 @@ class Graph extends Component<IProps, {}> {
     }
   }
 }
-
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.26.2.windows.1

